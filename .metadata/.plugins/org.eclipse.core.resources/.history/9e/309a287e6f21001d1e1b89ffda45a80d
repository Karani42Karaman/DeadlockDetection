
import java.util.*;

public class Main {

	public static int ReqMatrix[][] = new int[100][100];// reaquest matrixi
	public static int Alloc[][] = new int[100][100]; // allocation matrixi
	public static int Resource[] = new int[100]; // kaynak matrisi kaynak bilgilerini alacağız
	public static int Work[] = new int[100]; // W = Tahsis - Kaynak;
	public static int RowDecimalNumer[] = new int[100]; // istek matrisindeki satırındaki numaralar ile work
														// matrisindeki numaraları karşılaştırmak için istek matrisini
														// satır satır alıp decimale çevireceğim
	public static int ProccessCount /* n */ , ResourceInstanceCount /* r */;

	/*
	 * programın çalıştığı ana main methodu
	 */
	public static void main(String[] args) {
		System.out.println("Deadlock karnai Kilitlenme Algoritmasi");
		input();
		show();
		cal();
	}

	/*
	 * Programın çalışması için gerekli matrisleri alır
	 */
	public static void input() {
		Scanner input = new Scanner(System.in);// kalvyeden giriş işlemleri için Scanner nesnesini tanımladık

		System.out.print("Proccess Sayisini Giriniz :");
		ProccessCount = input.nextInt();// Proccess sayısını kalvyeden alırıc bu değişkene

		System.out.print("\nKaynak Adedini Giriniz :");
		ResourceInstanceCount = input.nextInt();

		System.out.println("Request Matrixi Giriniz :");
		for (int i = 0; i < ProccessCount; i++) {
			for (int j = 0; j < ResourceInstanceCount; j++) {
				ReqMatrix[i][j] = input.nextInt(); // Request Matrisini alıyoruz klavyeden
			}
		}

		System.out.println("Allocation Matrix Giriniz :");
		for (int i = 0; i < ProccessCount; i++) {
			for (int j = 0; j < ResourceInstanceCount; j++) {
				Alloc[i][j] = input.nextInt(); // Allocation Matrisini alıyoruz klavyeden
			}
		}

		System.out.println("Mevcut Kaynagi Giriniz :");
		for (int j = 0; j < ResourceInstanceCount; j++) {
			Resource[j] = input.nextInt(); // Mevcut Kaynağı alıyoruz klavyeden
		}

		input.close();
	}

	public static void show() {
		System.out.print("Process\t Allocation\t Request\t Resource\t");
		for (int i = 0; i < ProccessCount; i++) {

			System.out.print("\nP" + (i + 1) + "\t");
			for (int j = 0; j < ResourceInstanceCount; j++) {
				System.out.print(Alloc[i][j] + " ");
			}
			System.out.print("\t\t");
			for (int j = 0; j < ResourceInstanceCount; j++) {
				System.out.print(ReqMatrix[i][j] + " ");
			}
			System.out.print("\t\t");
			if (i == 0) {
				for (int j = 0; j < ResourceInstanceCount; j++) {
					System.out.print(Resource[j] + " ");
				}
			}
		}

	}

	public static void cal() {
		boolean finish[] = new boolean[100];

		int dead[] = new int[100];

		// kaynak adedi kadar finish vektörüne false değerini atıyoruz
		for (int i = 0; i < ResourceInstanceCount; i++) {
			finish[i] = false;// burda derste anlatıldığı gibi finish matrisini öncelikle false olarak
								// dolduruyoruz kilitlenmeleri bulmak için kullanacağız
		}

		// burda work vektörünü bulacağız (Work = Allocation - Kaynak )
		int allocSum = 0;
		for (int i = 0; i < ResourceInstanceCount; i++) {
			for (int j = 0; j < ProccessCount; j++) {
				allocSum += Alloc[j][i];
			}
			Work[i] = Math.abs(Resource[i] - allocSum);
			allocSum = 0;
		}
		// burda istek matrsiindeki rowları birleştirip öyle karşılaştırma yapmak için
		// işlem yapıyoruz
		String rowCombine = "";
		for (int i = 0; i < ProccessCount; i++) {
			for (int j = 0; j < ResourceInstanceCount; j++) {
				rowCombine += String.valueOf(ReqMatrix[i][j]);
			}
			RowDecimalNumer[i] = Integer.parseInt(rowCombine); // row row aldık matrix in içinden sayıları
			rowCombine = "";
		}

		// burda asıl hesaplama işlerini yapacağız
		for (int i = 0; i < ProccessCount; i++) {
			if (finish[i] == false) {
				if (RowDecimalNumer[i] <= ArrayConvertDecimal()) {
					finish[i] = true;
					for (int j = 0; j < ResourceInstanceCount; j++) {
						Work[j] = Alloc[i][j] + Work[j];
					}
				}
			}
		}

		int j = 0;
		boolean flag = false;
		for (int i = 0; i < ProccessCount; i++) {
			if (finish[i] == false) {
				dead[j] = i;
				j++;
				flag = true;
			}
		}
		if (flag) {
			System.out.print("\n\nSistemde Kilitlenme var ve Kilitlenme surecleri\n");
			for (int i = 0; i < ProccessCount; i++) {
				if (finish[i] == false) {
					//System.out.print("P" + dead[i] + "\t");
					System.out.print("P" + i + "\t");
				}
			}
		} else {
			System.out.println("Deadlock Kilitlenme Yoktur.");
		}

		/*
		 * // workü bulduk for (int i = 0; i < ResourceInstanceCount; i++) {
		 * System.out.print(Work[i] + " "); }
		 */
	}

	private static int ArrayConvertDecimal() {
		// Work[i]
		// burda Work matrsiindeki rowları birleştirip öyle karşılaştırma yapmak için
		// işlem yapıyoruz
		String rowCombine = "";

		for (int j = 0; j < ResourceInstanceCount; j++) {
			rowCombine += String.valueOf(Work[j]);
		}
		return Integer.parseInt(rowCombine); // row row aldık matrix in içinden sayıları
	}
}
